
DOCUMENTATION

PREPROCESSING
----------------------------------------------------------------------------------------

preprocessing.py
def preprocess(df, language)
--------------------------------------------

Effectue le preprocessing de df dans la language language.
df doit correspondre a une colonne.
language correspond au langage des "stopwords", à écrire en anglais.

Conditions:
Retirer N/A values
df correspond à la colonne de texte uniquement


Exemple:

from projet_sem3 import preprocessing
avis_df = pd.read_csv('data/avis.csv')
avis_df_treated = avis_df.dropna(inplace=False)
X, y = avis_df_treated.drop(['note'], axis=1), avis_df_treated['note']
X['comment'] = preprocessing.preprocess(X['comment'] ,"french")

Pour charger les y:
X_prep_stem_unique = pd.read_csv('data/files/X_prep_stemm_unique')
X_prep_stem_dup = pd.read_csv('data/files/X_prep_stemm_dup')

X_prep_stem_unique = X_prep_stem_unique.dropna(inplace=False)
X_prep_stem_dup = X_prep_stem_dup.dropna(inplace=False)

y = y[y.index.isin(X_prep_stem_dup.index)]

def show_popular_words(df, most_common_nb):
--------------------------------------------

Affiche les mots les plus populaires de df sous la forme d'un WordCloud.

df correspond à une colonne de texte et most_common_nb la taille du classement des mots les plus populaires à renvoyer.

Conditions:
df est preprocessed.

Exemple: 

most_common  = preprocessing.show_popular_words(X['comment'], 20)
print(most_common)


def get_most_common_words(df, n):
--------------------------------------------

Retourne les n mots les plus populaires de df sous forme de liste.

Conditions: df correspond à la colonne de texte uniquement.
Il faut retirer les N/A values avant d'appeler la fonction.

Exemple:
X_prep_stem = pd.read_csv('data/files/X_prep_stemm_unique')
X_prep_stem = X_prep_stem.dropna(inplace=False)
popular_words = preprocessing.get_most_common_words(X_prep_stem, 20000)



TEXT REPRESENTATION
----------------------------------------------------------------------------------------


def count_vector_encode(com_words, sentence, count_matrix, row_index):
--------------------------------------------

Fonction permettant de transformer un dataframe en une matrice de word embeddings (en  passant par apply)

Exemple:

count_matrix = np.zeros((X_prep_stem_dup['comment'].shape[0], len(popular_words)))
X_prep_stem_dup = X_prep_stem_dup.reset_index(drop=True)

X_prep_stem_dup['row_index'] = X_prep_stem_dup.index
X_prep_stem_dup.progress_apply(lambda x: count_vector_encode(popular_words, x.comment, count_matrix, x.row_index), axis=1)


CLASSIFICATION
----------------------------------------------------------------------------------------

def naive_bayes_train(X, parameters_pos, parameters_neg): 
--------------------------------------------

Exemple: 

df_stopwords = pd.read_csv('data/files/data_preprocess_avec_stopwords.csv')
df_wo_stopwords = pd.read_csv('data/files/data_preprocess_sans_stopwords.csv')

df_stopwords = df_stopwords.dropna(inplace=False)
df_wo_stopwords = df_wo_stopwords.dropna(inplace=False)

df_stopwords = df_stopwords.reset_index(drop=True)
df_wo_stopwords = df_wo_stopwords.reset_index(drop=True)

df_stopwords['positive'] = df_stopwords['note'] > 5.0
df_wo_stopwords['positive'] = df_wo_stopwords['note'] > 5.0

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df_wo_stopwords['comment'], df_wo_stopwords['positive'])

p_pos, p_neg, parameters_pos, parameters_neg = class.naive_bayes_train(X_train, y_train, parameters_pos, parameters_neg)

results = pd.DataFrame()
results['predicted'] = X_train.apply(lambda x: class.classify_review(x, p_pos, p_neg, parameters_pos, parameters_neg)






